{:first-step "get-vpc-details",
 :name "deploy-to-aws",
 :revision 1,
 :type nil,
 :properties {:titanoboa-install-zip-url "https://www.titanoboa.io/distributions/titanoboa-0.7.4_jre_gui_non-commercial_use_only.zip",
              :customer-id "test",
              :creation-token #titanoboa.exp/Expression{:value "(java.util.UUID/randomUUID)",
                                                        :type "clojure"},
              :ssh-key-path "/path/to/ec2.pem",
              :credentials {:endpoint "us-west-1"},
              :rds-master-username "su",
              :availability-zone "us-west-1b",
              :rds-master-user-password "",
              :configs-upload->ec2 {:titanoboa-ec2-conf "/path/to/boa_server_config.clj",
                                    :steps-repo-zip "/path/to/steps-repo.zip",
                                    :ssl-keystore "/path/to/keystore.jks",
                                    :ext-dependencies "/path/to/ext-dependencies.clj",
                                    :jwt-pub-key "/path/to/auth_pubkey.pem",
                                    :jwt-priv-key "/path/to/auth_privkey.pem"}},
 :steps [{:properties {:filters [{:name "isDefault", :values ["true"]}]},
          :revision 1,
          :allow-parallel? true,
          :type :aws-ec2,
          :next [["*" "create-efs"]
                 ["*" "get-subnet-id"]
                 ["*" "get-user-id"]],
          :id "get-vpc-details",
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (-> (amazonica.aws.ec2/describe-vpcs (:credentials p) (select-keys p [:filters]))\n      (get-in [:vpcs 0 ])\n      (select-keys [:vpc-id])))",
                                                 :type "clojure"}}
         {:properties {},
          :revision 1,
          :allow-parallel? false,
          :type :aws-iam,
          :next [["*" "add-ec2-sec-group"]],
          :id "get-user-id",
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (amazonica.aws.identitymanagement/get-user  (:credentials p)))",
                                                 :type "clojure"}}
         {:id "save-db-config",
          :type :custom,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [{:keys [db-config-map db-config-filename]}] \n (spit (java.io.File. titanoboa.exp/*jobdir* db-config-filename) db-config-map))",
                                                 :type "clojure"},
          :next [["*" "sftp-configs"]],
          :properties {:db-config-map {:jdbc-url #titanoboa.exp/Expression{:value "(str \"jdbc:postgresql://\" \n     (:rds-dns titanoboa.exp/*properties*) \n     \":5432/\" \n     (get-in titanoboa.exp/*properties* [:rds-properties :db-name]))",
                                                                           :type "clojure"},
                                       :user #titanoboa.exp/Expression{:value "(:rds-master-username titanoboa.exp/*properties*)",
                                                                       :type "clojure"},
                                       :password #titanoboa.exp/Expression{:value "(:rds-master-user-password titanoboa.exp/*properties*)",
                                                                           :type "clojure"},
                                       :driver-class "org.postgresql.Driver"},
                       :db-config-filename "db-config.edn"}}
         {:id "create-efs",
          :type :aws-efs,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [{:keys [credentials] :as p}] \n {:efs  (amazonica.aws.elasticfilesystem/create-file-system credentials (select-keys p [:creation-token]))})",
                                                 :type "clojure"},
          :next [["*" "check-efs"]],
          :properties {},
          :revision 1}
         {:id "efs-tags",
          :type :aws-efs,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p]\n  (amazonica.aws.elasticfilesystem/create-tags (:credentials p) (select-keys p [:file-system-id :tags])))",
                                                 :type "clojure"},
          :next [["*" "launch-ec2"]],
          :properties {:file-system-id #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:efs :file-system-id])",
                                                                 :type "clojure"},
                       :tags [{:value #titanoboa.exp/Expression{:value "(:customer-id titanoboa.exp/*properties*)",
                                                                :type "clojure"},
                               :key "Name"}
                              {:value #titanoboa.exp/Expression{:value "(:customer-id titanoboa.exp/*properties*)",
                                                                :type "clojure"},
                               :key "customer-id"}]},
          :revision 1}
         {:id "get-subnet-id",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (-> (amazonica.aws.ec2/describe-subnets (:credentials p) (select-keys p [:filters]))\n      (get-in [:subnets 0 ])\n      (select-keys [:subnet-id])))",
                                                 :type "clojure"},
          :next [["*" "mount-target"]],
          :properties {:filters [{:name "vpc-id",
                                  :values #titanoboa.exp/Expression{:value "[(:vpc-id titanoboa.exp/*properties*)]",
                                                                    :type "clojure"}}
                                 {:name "availability-zone",
                                  :values #titanoboa.exp/Expression{:value "[(:availability-zone titanoboa.exp/*properties*)]",
                                                                    :type "clojure"}}
                                 {:name "default-for-az",
                                  :values ["true"]}]},
          :revision 1}
         {:id "check-instance",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (let [resp (amazonica.aws.ec2/describe-instances (:credentials p) (select-keys p [:filters]))]\n  {:return-code (get-in resp [:reservations 0 :instances 0 :state :name])\n   :ec2-dns  (get-in resp [:reservations 0 :instances 0 :public-dns-name])}))",
                                                 :type "clojure"},
          :next [["running" "instance-ready"] ["*" "wait-on-ec2"]],
          :properties {:filters #titanoboa.exp/Expression{:value "[{:name \"instance-id\" :values [(:ec2-instance-id  titanoboa.exp/*properties*)]}]",
                                                          :type "clojure"}},
          :revision 1}
         {:id "sg-rds-inbound",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (amazonica.aws.ec2/authorize-security-group-ingress (:credentials p) (select-keys p [:group-id :ip-permissions])))",
                                                 :type "clojure"},
          :next [["*" "sg-efs-inbound"]],
          :properties {:ip-permissions #titanoboa.exp/Expression{:value "[{:from-port 5432\n   :ip-protocol \"tcp\"\n   :to-port 5432\n   :prefix-list-ids []\n :user-id-group-pairs [{:description \"RDS mount\"\n                                      :user-id (get-in titanoboa.exp/*properties* [:user :user-id])\n                                        :group-id (get titanoboa.exp/*properties* :sg-group-id-ec2)}]}]",
                                                                 :type "clojure"},
                       :group-id #titanoboa.exp/Expression{:value "(get titanoboa.exp/*properties* :sg-group-id-rds)",
                                                           :type "clojure"}},
          :revision 1}
         {:id "sg-ec2-inbound",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (amazonica.aws.ec2/authorize-security-group-ingress (:credentials p) (select-keys p [:group-id :ip-permissions])))",
                                                 :type "clojure"},
          :next [["*" "sg-efs-inbound"]],
          :properties {:group-id #titanoboa.exp/Expression{:value "(get titanoboa.exp/*properties* (:sg-key titanoboa.exp/*properties*))",
                                                           :type "clojure"},
                       :ip-permissions [{:from-port 22,
                                         :ip-protocol "tcp",
                                         :to-port 22,
                                         :prefix-list-ids [],
                                         :user-id-group-pairs [],
                                         :ip-ranges ["0.0.0.0/0"],
                                         :ipv6ranges [],
                                         :ipv4ranges [{:cidr-ip "0.0.0.0/0"}]}
                                        {:from-port 443,
                                         :ip-protocol "tcp",
                                         :to-port 443,
                                         :prefix-list-ids [],
                                         :user-id-group-pairs [],
                                         :ip-ranges ["0.0.0.0/0"],
                                         :ipv6ranges [{:cidr-ipv6 "::/0"}],
                                         :ipv4ranges [{:cidr-ip "0.0.0.0/0"}]}]},
          :revision 1}
         {:id "wait-on-mount",
          :type :custom,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n (Thread/sleep 3000))",
                                                 :type "clojure"},
          :next [["*" "check-mount"]],
          :properties {}}
         {:id "instance-ready",
          :type :custom,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n (Thread/sleep 15000))",
                                                 :type "clojure"},
          :next [["*" "sftp-configs"]],
          :properties {}}
         {:id "add-efs-sec-group",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  {(:sg-key p) (:group-id (amazonica.aws.ec2/create-security-group (:credentials p) (:sg-properties p)))})",
                                                 :type "clojure"},
          :next [["*" "sg-efs-inbound"]],
          :properties {:sg-properties {:group-name #titanoboa.exp/Expression{:value "(str (:customer-id titanoboa.exp/*properties*) \"-efs\")",
                                                                             :type "clojure"},
                                       :vpc-id #titanoboa.exp/Expression{:value "(:vpc-id titanoboa.exp/*properties*)",
                                                                         :type "clojure"},
                                       :description #titanoboa.exp/Expression{:value "(str \"security group for an EFS instance for \" (:customer-id titanoboa.exp/*properties*))",
                                                                              :type "clojure"}},
                       :sg-key :sg-group-id-efs},
          :revision 1}
         {:id "wait-on-ec2",
          :type :custom,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n (Thread/sleep 20000))",
                                                 :type "clojure"},
          :next [["*" "check-instance"]],
          :properties {}}
         {:id "wait",
          :type :custom,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n (Thread/sleep 3000))",
                                                 :type "clojure"},
          :next [["*" "check-efs"]],
          :properties {}}
         {:id "sg-efs-inbound",
          :type :aws-ec2,
          :supertype :join,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (amazonica.aws.ec2/authorize-security-group-ingress (:credentials p) (select-keys p [:group-id :ip-permissions])))",
                                                 :type "clojure"},
          :next [["*" "mount-target"]],
          :properties {:group-id #titanoboa.exp/Expression{:value "(get titanoboa.exp/*properties* :sg-group-id-efs)",
                                                           :type "clojure"},
                       :ip-permissions #titanoboa.exp/Expression{:value "[{:ip-protocol \"-1\"\n  :prefix-list-ids []\n  :user-id-group-pairs [{:user-id (get-in titanoboa.exp/*properties* [:user :user-id])\n                                                                :group-id (get titanoboa.exp/*properties* :sg-group-id-efs)}]\n  :ip-ranges []\n  :ipv6ranges []\n  :ipv4ranges []}\n  {:from-port 2049\n   :ip-protocol \"tcp\"\n   :to-port 2049\n   :prefix-list-ids []\n :user-id-group-pairs [{:description \"EFS mount\"\n                                      :user-id (get-in titanoboa.exp/*properties* [:user :user-id])\n                                        :group-id (get titanoboa.exp/*properties* :sg-group-id-ec2)}]}]",
                                                                 :type "clojure"}},
          :revision 1}
         {:id "wait-on-rds",
          :type :custom,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n (Thread/sleep 20000))",
                                                 :type "clojure"},
          :next [["*" "rds-ready?"]],
          :properties {}}
         {:id "check-mount",
          :type :aws-efs,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n {:return-code  ( -> (amazonica.aws.elasticfilesystem/describe-mount-targets (:credentials p)  (select-keys p [:mount-target-id]))\n    (get-in [:mount-targets 0 :life-cycle-state]))})",
                                                 :type "clojure"},
          :next [["creating" "wait-on-mount"]
                 ["available" "efs-tags"]],
          :properties {},
          :revision 1}
         {:description "SFTP Client",
          :properties {:ssh-agent-settings {:use-system-ssh-agent false},
                       :identities {:private-key-path #titanoboa.exp/Expression{:value "(:ssh-key-path titanoboa.exp/*properties*)",
                                                                                :type "clojure"}},
                       :sftp-cmds-vec [[:put
                                        #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:configs-upload->ec2 :ssl-keystore])",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/keystore.jks"]
                                       [:put
                                        #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:configs-upload->ec2 :steps-repo-zip])",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/steps-repo.zip"]
                                       [:put
                                        #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:configs-upload->ec2 :titanoboa-ec2-conf])",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/boa_server_config.clj"]
                                       [:put
                                        #titanoboa.exp/Expression{:value "(-> (java.io.File. titanoboa.exp/*jobdir* (:db-config-filename titanoboa.exp/*properties*))\n    (.getAbsolutePath))",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/db-config.edn"]
                                       [:put
                                        #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:configs-upload->ec2 :ext-dependencies])",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/ext-dependencies.clj"]
                                       [:put
                                        #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:configs-upload->ec2 :jwt-pub-key])",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/auth_pubkey.pem"]
                                       [:put
                                        #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:configs-upload->ec2 :jwt-priv-key])",
                                                                  :type "clojure"}
                                        "/mnt/efs/titanoboa/auth_privkey.pem"]],
                       :host #titanoboa.exp/Expression{:value "(:ec2-dns titanoboa.exp/*properties*)",
                                                       :type "clojure"},
                       :session-options {:username "ec2-user",
                                         :strict-host-key-checking "no",
                                         :preferred-authentications "publickey"}},
          :revision 1,
          :retry-on-error? false,
          :type :sftp,
          :next [["*" "ssh"]],
          :id "sftp-configs",
          :max-retries 0,
          :supertype :join,
          :workload-fn #titanoboa.exp/Expression{:value "io.titanoboa.tasklet.ssh/sftp",
                                                 :type "clojure"}}
         {:id "check-efs",
          :type :aws-efs,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n {:return-code (-> (amazonica.aws.elasticfilesystem/describe-file-systems (:credentials p) (select-keys p [:creation-token]))\n      (get-in [:file-systems 0 :life-cycle-state]))})",
                                                 :type "clojure"},
          :next [["creating" "wait"] ["available" "mount-target"]],
          :properties {},
          :revision 1}
         {:id "create-rds-db",
          :type :aws-rds,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (amazonica.aws.rds/create-db-instance (:credentials p) (:rds-properties p))\n  :ok)",
                                                 :type "clojure"},
          :next [["*" "rds-ready?"]],
          :properties {:rds-properties {:vpc-security-group-ids #titanoboa.exp/Expression{:value "[(:sg-group-id-rds titanoboa.exp/*properties*)]",
                                                                                          :type "clojure"},
                                        :master-username #titanoboa.exp/Expression{:value "(:rds-master-username titanoboa.exp/*properties*)",
                                                                                   :type "clojure"},
                                        :db-name "titanoboa",
                                        :db-instance-class "db.t2.micro",
                                        :db-instance-identifier #titanoboa.exp/Expression{:value "(:customer-id titanoboa.exp/*properties*)",
                                                                                          :type "clojure"},
                                        :availability-zone #titanoboa.exp/Expression{:value "(:availability-zone titanoboa.exp/*properties*)",
                                                                                     :type "clojure"},
                                        :allocated-storage 20,
                                        :engine "postgres",
                                        :master-user-password #titanoboa.exp/Expression{:value "(:rds-master-user-password titanoboa.exp/*properties*)",
                                                                                        :type "clojure"},
                                        :storage-type "gp2"}},
          :revision 1}
         {:id "add-rds-sec-group",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  {(:sg-key p) (:group-id (amazonica.aws.ec2/create-security-group (:credentials p) (:sg-properties p)))})",
                                                 :type "clojure"},
          :next [["*" "sg-rds-inbound"]],
          :properties {:sg-properties {:group-name #titanoboa.exp/Expression{:value "(str (:customer-id titanoboa.exp/*properties*) \"-rds\")",
                                                                             :type "clojure"},
                                       :vpc-id #titanoboa.exp/Expression{:value "(:vpc-id titanoboa.exp/*properties*)",
                                                                         :type "clojure"},
                                       :description #titanoboa.exp/Expression{:value "(str \"security group for an RDS instance for \" (:customer-id titanoboa.exp/*properties*))",
                                                                              :type "clojure"}},
                       :sg-key :sg-group-id-rds},
          :revision 1}
         {:description "SSH Client",
          :properties {:ssh-agent-settings {:use-system-ssh-agent false},
                       :identities {:private-key-path #titanoboa.exp/Expression{:value "(:ssh-key-path titanoboa.exp/*properties*)",
                                                                                :type "clojure"}},
                       :ssh-cmd-map {:in #titanoboa.exp/Expression{:value "\"mkdir -p /mnt/efs/titanoboa/stepsrepo\nunzip /mnt/efs/titanoboa/steps-repo.zip -d /mnt/efs/titanoboa/stepsrepo\ncd ./titanoboa\n./db-setup.sh /mnt/efs/titanoboa/db-config.edn ~/titanoboa/db-setup/postgres_create.sql\n./add-user.sh /mnt/efs/titanoboa/db-config.edn admin AdminPwdHere some@email.com admin\n./add-user.sh /mnt/efs/titanoboa/db-config.edn user1 UserPwdHere some_other@email.com user\n./start-nohup.sh\"",
                                                                   :type "clojure"}},
                       :host #titanoboa.exp/Expression{:value "(:ec2-dns titanoboa.exp/*properties*)",
                                                       :type "clojure"},
                       :session-options {:username "ec2-user",
                                         :strict-host-key-checking "no",
                                         :preferred-authentications "publickey"}},
          :revision 1,
          :type :ssh,
          :next [],
          :id "ssh",
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "io.titanoboa.tasklet.ssh/ssh",
                                                 :type "clojure"}}
         {:id "rds-ready?",
          :type :aws-rds,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n (let [resp (amazonica.aws.rds/describe-db-instances (:credentials p) (select-keys p [:db-instance-identifier]))]\n   {:return-code (get-in resp [:dbinstances 0 :dbinstance-status])\n    :rds-dns (get-in resp [:dbinstances 0 :endpoint  :address])}))",
                                                 :type "clojure"},
          :next [["available" "save-db-config"] ["*" "wait-on-rds"]],
          :properties {:db-instance-identifier #titanoboa.exp/Expression{:value "(:customer-id titanoboa.exp/*properties*)",
                                                                         :type nil}},
          :revision 1}
         {:properties {:security-groups [#titanoboa.exp/Expression{:value "(:sg-group-id-efs titanoboa.exp/*properties*)",
                                                                   :type "clojure"}],
                       :file-system-id #titanoboa.exp/Expression{:value "(get-in titanoboa.exp/*properties* [:efs :file-system-id])",
                                                                 :type "clojure"}},
          :revision 1,
          :allow-parallel? true,
          :type :aws-efs,
          :next [["*" "check-mount"] ["*" "create-rds-db"]],
          :id "mount-target",
          :supertype :join,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  (amazonica.aws.elasticfilesystem/create-mount-target (:credentials p) (select-keys p [:file-system-id :subnet-id :security-groups])))",
                                                 :type "clojure"}}
         {:id "launch-ec2",
          :type :aws-ec2,
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  {:ec2-instance-id (-> (amazonica.aws.ec2/run-instances (:credentials p) \n                                                         (select-keys p [:image-id :instance-type :min-count :max-count \n                                                                         :key-name :security-group-ids :subnet-id :user-data]))\n      (get-in [:reservation :instances 0 :instance-id]))})",
                                                 :type "clojure"},
          :next [["*" "check-instance"]],
          :properties {:image-id "ami-07f1fbbff759e24dd",
                       :instance-type "t2.micro",
                       :min-count 1,
                       :max-count 1,
                       :key-name "ec2-titanoboa",
                       :security-group-ids [#titanoboa.exp/Expression{:value "(:sg-group-id-ec2 titanoboa.exp/*properties*)",
                                                                      :type "clojure"}],
                       :subnet-id #titanoboa.exp/Expression{:value "(:subnet-id titanoboa.exp/*properties*)",
                                                            :type "clojure"},
                       :user-data #titanoboa.exp/Expression{:value "(->>\n  (str\n\"#cloud-config\nrepo_update: true\nrepo_upgrade: all\n\npackages:\n- amazon-efs-utils\n\nruncmd:\n- sudo yum install java-1.8.0-openjdk-devel -y\n- mkdir -p /mnt/efs\n- echo \\\"\" (get-in titanoboa.exp/*properties* [:efs :file-system-id]) \":/ /mnt/efs efs tls,_netdev\\\" >> /etc/fstab\n- mount -a -t efs defaults\n- mkdir -p /mnt/efs/titanoboa\n- chown -R ec2-user /mnt/efs/titanoboa\n- mkdir -p /home/ec2-user/titanoboa\n- curl -o titanoboa.zip \"(:titanoboa-install-zip-url titanoboa.exp/*properties*)\"\n- unzip titanoboa.zip -d /home/ec2-user/titanoboa\n- chmod 755 /home/ec2-user/titanoboa/db-setup.sh\n- chmod 755 /home/ec2-user/titanoboa/add-user.sh\n- chmod 755 /home/ec2-user/titanoboa/start.sh\n- chmod 755 /home/ec2-user/titanoboa/start-nohup.sh\n- chmod 755 /home/ec2-user/titanoboa/stop.sh\n- chown -R ec2-user /home/ec2-user/titanoboa\")\n  .getBytes\n  (.encodeToString (java.util.Base64/getEncoder)))",
                                                            :type "clojure"}},
          :revision 1}
         {:properties {:sg-properties {:group-name #titanoboa.exp/Expression{:value "(str (:customer-id titanoboa.exp/*properties*) \"-ec2\")",
                                                                             :type "clojure"},
                                       :vpc-id #titanoboa.exp/Expression{:value "(:vpc-id titanoboa.exp/*properties*)",
                                                                         :type "clojure"},
                                       :description #titanoboa.exp/Expression{:value "(str \"security group for an EC2 instance for \" (:customer-id titanoboa.exp/*properties*))",
                                                                              :type "clojure"}},
                       :sg-key :sg-group-id-ec2},
          :revision 1,
          :allow-parallel? true,
          :type :aws-ec2,
          :next [["*" "sg-ec2-inbound"]
                 ["*" "add-efs-sec-group"]
                 ["*" "add-rds-sec-group"]],
          :id "add-ec2-sec-group",
          :supertype :tasklet,
          :workload-fn #titanoboa.exp/Expression{:value "(fn [p] \n  {(:sg-key p) (:group-id (amazonica.aws.ec2/create-security-group (:credentials p) (:sg-properties p)))})",
                                                 :type "clojure"}}],
 :description "This workflow creates a clean new AWS titanoboa setup.\nIt provisions new RDS, EC2 and EFS instances, creates and applies corresponding security groups (in default VPC). All resources are named (if possible) using the provided :customer-id. EFS is mounted to EC2 and EC2 is set up appropriately (i.e. java install, titanoboa install etc.).\nAll these tasks are parallelized as much as possible.\nThis workflow then auto-generates and uploads all necessary titanoboa configs via SFTP.\nFinally a titanoboa DB setup is performed via SSH and titanoboa user(s) are added. Titanoboa instance is then started via ssh.\n\nThis workflow returns following key/value pairs (among others):\n:rds-dns DNS of newly created RDS\n:ec2-dns DNS of newly created EC2 instance\n:sg-group-id-efs ID of security group for EFS\n:sg-group-id-ec2 ID of security group for EC2\n:sg-group-id-rds ID of security group for RDS"}
